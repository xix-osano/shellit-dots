cmake_minimum_required(VERSION 3.19)

# ---------------------------------------------------------------------------
# Version Management
# ---------------------------------------------------------------------------
if(NOT DEFINED VERSION)
    execute_process(
        COMMAND git describe --tags --abbrev=0
        WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
        OUTPUT_VARIABLE VERSION
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if("${VERSION}" STREQUAL "")
        set(VERSION "0.1.0")  # fallback
        message(WARNING "VERSION not set and no git tag found â€” defaulting to ${VERSION}")
    endif()
endif()

if(NOT DEFINED GIT_REVISION)
    execute_process(
        COMMAND git rev-parse --short HEAD
        WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
        OUTPUT_VARIABLE GIT_REVISION
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if("${GIT_REVISION}" STREQUAL "")
        set(GIT_REVISION "unknown")
    endif()
endif()

string(REGEX REPLACE "^v" "" VERSION "${VERSION}")

# ---------------------------------------------------------------------------
# Project
# ---------------------------------------------------------------------------
project(shellit VERSION ${VERSION} LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

# ---------------------------------------------------------------------------
# Install Paths
# ---------------------------------------------------------------------------
set(DISTRIBUTOR "Unset" CACHE STRING "Distributor")
set(ENABLE_MODULES "extras;shell" CACHE STRING "Modules to build/install")
set(INSTALL_LIBDIR "usr/lib/shellit" CACHE STRING "Library install dir")
set(INSTALL_QMLDIR "usr/lib/qt6/qml" CACHE STRING "QML install dir")
set(INSTALL_QSCONFDIR "etc/xdg/quickshell/shellit" CACHE STRING "Quickshell config install dir")


# Determine install location (default: ~/.config/quickshell/shellit)
if(DEFINED ENV{XDG_CONFIG_HOME})
    set(DEFAULT_CONFIG_DIR "$ENV{XDG_CONFIG_HOME}/quickshell/shellit")
else()
    set(DEFAULT_CONFIG_DIR "$ENV{HOME}/.config/quickshell/shellit")
endif()

set(INSTALL_QSCONFDIR "${DEFAULT_CONFIG_DIR}" CACHE PATH "User Quickshell config directory")

message(STATUS "Installing Shellit config to: ${INSTALL_QSCONFDIR}")

# ---------------------------------------------------------------------------
# Compile Options
# ---------------------------------------------------------------------------
add_compile_options(
    -Wall -Wextra -Wpedantic -Wshadow -Wconversion
    -Wold-style-cast -Wnull-dereference -Wdouble-promotion
    -Wformat=2 -Wfloat-equal -Wsign-conversion
)
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wunused-lambda-capture)
endif()

# ---------------------------------------------------------------------------
# Version Header Generation
# ---------------------------------------------------------------------------
set(VERSION_HEADER "${CMAKE_BINARY_DIR}/include/shellit/version.h")

file(WRITE "${VERSION_HEADER}" 
"#pragma once\n"
"// Auto-generated by CMake\n"
"#define SHELLIT_VERSION \"${VERSION}\"\n"
"#define SHELLIT_GIT_REVISION \"${GIT_REVISION}\"\n"
"#define SHELLIT_DISTRIBUTOR \"${DISTRIBUTOR}\"\n"
)

install(FILES "${VERSION_HEADER}" DESTINATION "${INSTALL_QSCONFDIR}/include")

# ---------------------------------------------------------------------------
# Installation Logic
# ---------------------------------------------------------------------------
if("shell" IN_LIST ENABLE_MODULES)
    foreach(dir assets components config modules services utils)
        if(EXISTS "${dir}")
            install(DIRECTORY ${dir} DESTINATION "${INSTALL_QSCONFDIR}")
        endif()
    endforeach()

    install(FILES "${CMAKE_SOURCE_DIR}/shell.qml"
        DESTINATION "${INSTALL_QSCONFDIR}")
endif()

# ---------------------------------------------------------------------------
# Print Build Info
# ---------------------------------------------------------------------------
message(STATUS "Configuring Shellit v${VERSION} (${GIT_REVISION})")
message(STATUS "Install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Config dir: ${INSTALL_QSCONFDIR}")
