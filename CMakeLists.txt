cmake_minimum_required(VERSION 3.19)

# ---------------------------------------------------------------------------
# Version Management
# ---------------------------------------------------------------------------
set(VERSION_FILE "${CMAKE_SOURCE_DIR}/shellit/VERSION")

if(EXISTS "${VERSION_FILE}")
    file(READ "${VERSION_FILE}" VERSION)
    string(STRIP "${VERSION}" VERSION)
else()
    set(VERSION "0.1.0")  # fallback if VERSION file not found
    message(WARNING "VERSION file not found â€” defaulting to ${VERSION}")
endif()

set(GIT_REVISION "static") # no git, so just a placeholder

# ---------------------------------------------------------------------------
# Project
# ---------------------------------------------------------------------------
project(shellit VERSION ${VERSION} LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

# ---------------------------------------------------------------------------
# Install Paths
# ---------------------------------------------------------------------------
set(DISTRIBUTOR "Unset" CACHE STRING "Distributor")
set(ENABLE_MODULES "shell" CACHE STRING "Modules to build/install")
set(INSTALL_LIBDIR "usr/lib/shellit" CACHE STRING "Library install dir")
set(INSTALL_QMLDIR "usr/lib/qt6/qml" CACHE STRING "QML install dir")
set(INSTALL_QSCONFDIR "etc/xdg/quickshell/shellit" CACHE STRING "Quickshell config install dir")
set(INSTALL_DOCDIR "usr/share/doc/shellit" CACHE STRING "Documentation install dir")

# ---------------------------------------------------------------------------
# Compile Options
# ---------------------------------------------------------------------------
add_compile_options(
    -Wall -Wextra -Wpedantic -Wshadow -Wconversion
    -Wold-style-cast -Wnull-dereference -Wdouble-promotion
    -Wformat=2 -Wfloat-equal -Wsign-conversion
)
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wunused-lambda-capture)
endif()

# ---------------------------------------------------------------------------
# Version Header Generation
# ---------------------------------------------------------------------------
set(VERSION_HEADER "${CMAKE_BINARY_DIR}/include/shellit/version.h")

file(WRITE "${VERSION_HEADER}" 
"#pragma once\n"
"// Auto-generated by CMake\n"
"#define SHELLIT_VERSION \"${VERSION}\"\n"
"#define SHELLIT_GIT_REVISION \"${GIT_REVISION}\"\n"
"#define SHELLIT_DISTRIBUTOR \"${DISTRIBUTOR}\"\n"
)

install(FILES "${VERSION_HEADER}" DESTINATION "${INSTALL_QSCONFDIR}/include")

# ---------------------------------------------------------------------------
# Installation Logic
# ---------------------------------------------------------------------------
if("shell" IN_LIST ENABLE_MODULES)
    foreach(dir assets Common Modals Modules Services Widgets)
        if(EXISTS "${dir}")
            install(DIRECTORY ${dir} DESTINATION "${INSTALL_QSCONFDIR}")
        endif()
    endforeach()

    install(FILES "${CMAKE_SOURCE_DIR}/shell.qml"
        DESTINATION "${INSTALL_QSCONFDIR}")
endif()

# ---------------------------------------------------------------------------
# Print Build Info
# ---------------------------------------------------------------------------
message(STATUS "Configuring Shellit v${VERSION} (${GIT_REVISION})")
message(STATUS "Install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Config dir: ${INSTALL_QSCONFDIR}")
